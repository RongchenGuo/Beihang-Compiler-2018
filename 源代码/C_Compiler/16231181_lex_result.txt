constsy:     const
intsy:     int
ident:     max_num
becomes:     '='
intcon:     512
semicolon:     ';'
intsy:     int
ident:     factorial
lparent:     '('
intsy:     int
ident:     n
rparent:     ')'
lbrace:     '{'
ifsy:     if
lparent:     '('
ident:     n
leq:     '<='
intcon:     1
rparent:     ')'
returnsy:     return
lparent:     '('
intcon:     1
rparent:     ')'
semicolon:     ';'
returnsy:     return
lparent:     '('
ident:     n
timessign:     '*'
ident:     factorial
lparent:     '('
ident:     n
minussign:     '-'
intcon:     1
rparent:     ')'
rparent:     ')'
semicolon:     ';'
rbrace:     '}'
intsy:     int
ident:     mod
lparent:     '('
intsy:     int
ident:     x
comma:     ','
intsy:     int
ident:     y
rparent:     ')'
lbrace:     '{'
ident:     x
becomes:     '='
ident:     x
minussign:     '-'
ident:     x
divisionsign:     '/'
ident:     y
timessign:     '*'
ident:     y
semicolon:     ';'
returnsy:     return
lparent:     '('
ident:     x
rparent:     ')'
semicolon:     ';'
rbrace:     '}'
voidsy:     void
ident:     swap
lparent:     '('
intsy:     int
ident:     x
comma:     ','
intsy:     int
ident:     y
rparent:     ')'
lbrace:     '{'
intsy:     int
ident:     temp
semicolon:     ';'
printsy:     printf
lparent:     '('
stringcon:      x = 
comma:     ','
ident:     x
rparent:     ')'
semicolon:     ';'
printsy:     printf
lparent:     '('
stringcon:      y = 
comma:     ','
ident:     y
rparent:     ')'
semicolon:     ';'
ident:     temp
becomes:     '='
ident:     x
semicolon:     ';'
ident:     x
becomes:     '='
ident:     y
semicolon:     ';'
ident:     y
becomes:     '='
ident:     temp
semicolon:     ';'
printsy:     printf
lparent:     '('
stringcon:      SWAP x = 
comma:     ','
ident:     x
rparent:     ')'
semicolon:     ';'
printsy:     printf
lparent:     '('
stringcon:      SWAP y = 
comma:     ','
ident:     y
rparent:     ')'
semicolon:     ';'
rbrace:     '}'
voidsy:     void
ident:     complete_num
lparent:     '('
intsy:     int
ident:     val
rparent:     ')'
lbrace:     '{'
intsy:     int
ident:     k
lbracket:     '['
intcon:     128
rbracket:     ']'
semicolon:     ';'
intsy:     int
ident:     i
comma:     ','
ident:     j
comma:     ','
ident:     n
comma:     ','
ident:     s
comma:     ','
ident:     x1
semicolon:     ';'
intsy:     int
ident:     m
comma:     ','
ident:     k2
comma:     ','
ident:     h
comma:     ','
ident:     leap
comma:     ','
ident:     x2
semicolon:     ';'
intsy:     int
ident:     a
comma:     ','
ident:     b
comma:     ','
ident:     c
semicolon:     ';'
ident:     j
becomes:     '='
ident:     val
semicolon:     ';'
whilesy:     while
lparent:     '('
ident:     j
lss:     '<'
ident:     max_num
rparent:     ')'
lbrace:     '{'
ident:     n
becomes:     '='
minussign:     '-'
intcon:     1
semicolon:     ';'
ident:     s
becomes:     '='
ident:     j
semicolon:     ';'
ident:     i
becomes:     '='
intcon:     1
semicolon:     ';'
whilesy:     while
lparent:     '('
ident:     i
lss:     '<'
ident:     j
rparent:     ')'
lbrace:     '{'
ident:     x1
becomes:     '='
lparent:     '('
ident:     j
divisionsign:     '/'
ident:     i
rparent:     ')'
timessign:     '*'
ident:     i
semicolon:     ';'
ifsy:     if
lparent:     '('
ident:     mod
lparent:     '('
ident:     j
comma:     ','
ident:     i
rparent:     ')'
eql:     '=='
intcon:     0
rparent:     ')'
lbrace:     '{'
ident:     n
becomes:     '='
ident:     n
plussign:     '+'
intcon:     1
semicolon:     ';'
ident:     s
becomes:     '='
ident:     s
minussign:     '-'
ident:     i
semicolon:     ';'
ifsy:     if
lparent:     '('
ident:     n
geq:     '>='
intcon:     128
rparent:     ')'
printsy:     printf
lparent:     '('
stringcon:      OVERFLOW!          
rparent:     ')'
semicolon:     ';'
ifsy:     if
lparent:     '('
ident:     n
lss:     '<'
intcon:     128
rparent:     ')'
ident:     k
lbracket:     '['
ident:     n
rbracket:     ']'
becomes:     '='
ident:     i
semicolon:     ';'
rbrace:     '}'
ident:     i
becomes:     '='
ident:     i
plussign:     '+'
intcon:     1
semicolon:     ';'
rbrace:     '}'
ifsy:     if
lparent:     '('
ident:     s
eql:     '=='
intcon:     0
rparent:     ')'
lbrace:     '{'
printsy:     printf
lparent:     '('
stringcon:      complete number: 
comma:     ','
ident:     j
rparent:     ')'
semicolon:     ';'
ident:     i
becomes:     '='
intcon:     0
semicolon:     ';'
whilesy:     while
lparent:     '('
ident:     i
leq:     '<='
ident:     n
rparent:     ')'
lbrace:     '{'
printsy:     printf
lparent:     '('
stringcon:       
comma:     ','
ident:     k
lbracket:     '['
ident:     i
rbracket:     ']'
rparent:     ')'
semicolon:     ';'
ident:     i
becomes:     '='
ident:     i
plussign:     '+'
intcon:     1
semicolon:     ';'
rbrace:     '}'
printsy:     printf
lparent:     '('
stringcon:               
rparent:     ')'
semicolon:     ';'
rbrace:     '}'
ident:     j
becomes:     '='
ident:     j
plussign:     '+'
intcon:     1
semicolon:     ';'
rbrace:     '}'
printsy:     printf
lparent:     '('
stringcon:      ---------------------------------------------------------------          
rparent:     ')'
semicolon:     ';'
ident:     a
becomes:     '='
intcon:     0
semicolon:     ';'
ident:     i
becomes:     '='
intcon:     0
semicolon:     ';'
whilesy:     while
lparent:     '('
ident:     i
lss:     '<'
ident:     max_num
rparent:     ')'
lbrace:     '{'
ident:     b
becomes:     '='
ident:     a
timessign:     '*'
ident:     i
semicolon:     ';'
ident:     c
becomes:     '='
ident:     j
timessign:     '*'
ident:     n
semicolon:     ';'
ident:     a
becomes:     '='
ident:     a
timessign:     '*'
ident:     i
semicolon:     ';'
ident:     a
becomes:     '='
ident:     a
plussign:     '+'
ident:     b
plussign:     '+'
ident:     c
semicolon:     ';'
ident:     i
becomes:     '='
ident:     i
plussign:     '+'
intcon:     1
semicolon:     ';'
rbrace:     '}'
ident:     b
becomes:     '='
ident:     a
semicolon:     ';'
ident:     i
becomes:     '='
intcon:     0
semicolon:     ';'
whilesy:     while
lparent:     '('
ident:     i
lss:     '<'
ident:     max_num
rparent:     ')'
lbrace:     '{'
ident:     b
becomes:     '='
ident:     b
plussign:     '+'
ident:     i
semicolon:     ';'
ident:     i
becomes:     '='
ident:     i
plussign:     '+'
intcon:     1
semicolon:     ';'
rbrace:     '}'
printsy:     printf
lparent:     '('
stringcon:      b = 
comma:     ','
ident:     b
rparent:     ')'
semicolon:     ';'
printsy:     printf
lparent:     '('
stringcon:      ---------------------------------------------------------------          
rparent:     ')'
semicolon:     ';'
ident:     h
becomes:     '='
intcon:     0
semicolon:     ';'
ident:     leap
becomes:     '='
intcon:     1
semicolon:     ';'
ident:     m
becomes:     '='
intcon:     2
semicolon:     ';'
whilesy:     while
lparent:     '('
ident:     m
leq:     '<='
ident:     max_num
rparent:     ')'
lbrace:     '{'
ident:     k2
becomes:     '='
ident:     m
divisionsign:     '/'
intcon:     2
semicolon:     ';'
ident:     i
becomes:     '='
intcon:     2
semicolon:     ';'
whilesy:     while
lparent:     '('
ident:     i
leq:     '<='
ident:     k2
rparent:     ')'
lbrace:     '{'
ident:     x2
becomes:     '='
lparent:     '('
ident:     m
divisionsign:     '/'
ident:     i
rparent:     ')'
timessign:     '*'
ident:     i
semicolon:     ';'
ifsy:     if
lparent:     '('
ident:     mod
lparent:     '('
ident:     m
comma:     ','
ident:     i
rparent:     ')'
eql:     '=='
intcon:     0
rparent:     ')'
lbrace:     '{'
ident:     leap
becomes:     '='
intcon:     0
semicolon:     ';'
rbrace:     '}'
ident:     i
becomes:     '='
ident:     i
plussign:     '+'
intcon:     1
semicolon:     ';'
rbrace:     '}'
ifsy:     if
lparent:     '('
ident:     leap
eql:     '=='
intcon:     1
rparent:     ')'
lbrace:     '{'
printsy:     printf
lparent:     '('
stringcon:      
comma:     ','
ident:     m
rparent:     ')'
semicolon:     ';'
ident:     h
becomes:     '='
ident:     h
plussign:     '+'
intcon:     1
semicolon:     ';'
ident:     x2
becomes:     '='
lparent:     '('
ident:     h
divisionsign:     '/'
intcon:     10
rparent:     ')'
timessign:     '*'
intcon:     10
semicolon:     ';'
ifsy:     if
lparent:     '('
ident:     x2
eql:     '=='
ident:     h
rparent:     ')'
printsy:     printf
lparent:     '('
stringcon:               
rparent:     ')'
semicolon:     ';'
rbrace:     '}'
ident:     leap
becomes:     '='
intcon:     1
semicolon:     ';'
ident:     m
becomes:     '='
ident:     m
plussign:     '+'
intcon:     1
semicolon:     ';'
rbrace:     '}'
printsy:     printf
lparent:     '('
stringcon:               The total is 
comma:     ','
ident:     h
rparent:     ')'
semicolon:     ';'
rbrace:     '}'
voidsy:     void
mainsy:     main
lparent:     '('
rparent:     ')'
lbrace:     '{'
intsy:     int
ident:     n
semicolon:     ';'
ident:     n
becomes:     '='
ident:     factorial
lparent:     '('
intcon:     5
rparent:     ')'
semicolon:     ';'
printsy:     printf
lparent:     '('
stringcon:      10! = 
comma:     ','
ident:     n
rparent:     ')'
semicolon:     ';'
ident:     swap
lparent:     '('
intcon:     5
comma:     ','
intcon:     10
rparent:     ')'
semicolon:     ';'
ident:     complete_num
lparent:     '('
intcon:     2
rparent:     ')'
semicolon:     ';'
rbrace:     '}'
